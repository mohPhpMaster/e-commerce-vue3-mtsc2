<template>
  <div>
    <button class="btn btn-primary" type="button" @click="open">Add to Cart</button>

	  <div :id="id" aria-hidden="true" aria-labelledby="cartModalLabel" class="modal fade" onclose="close()" tabindex="-1">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 id="cartModalLabel" class="modal-title">{{ title }}</h5>
            <button aria-label="إلغاء الاضافة" class="btn-close close" data-dismiss="modal" type="button">&times;</button>
          </div>

          <div class="modal-body">
            <div class="d-flex align-items-center">
              <label class="form-label mr-2 col-auto" for="groupSelect">يحتاج الى:
	                <button v-if="![null, ''].includes(selectedGroupIndex)" class="border-0 btn btn-outline-danger btn-sm" type="button" id="groupReset" aria-haspopup="false" aria-expanded="false" @click="resetGroup()">
	                  <span class="fa fa-refresh"></span>
	                </button>
              </label>
              <div class="dropdown ">
                <button class="btn btn-secondary dropdown-toggle px-3 w-100" type="button" id="groupSelect" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  {{ selectedGroupIndex !== "" ? product_accessories_groups[selectedGroupIndex].name : "اختر" }}
                </button>
                <div class="dropdown-menu w-100 p-3" aria-labelledby="groupSelect">
                  <input type="text" class="form-control mb-2 input-group-search" v-model="searchTerm" placeholder="بحث..." autofocus/>
                  <a v-if="filteredGroups?.length === product_accessories_groups?.length" class="dropdown-item" href="#" @click="selectGroup('')">اختر</a>
                  <a v-for="(group, index) in filteredGroups" :key="index" class="dropdown-item" href="#" @click="selectGroup(index)">
	                  {{ group.name }}
                  </a>
                </div>
              </div>
            </div>

            <div v-if="![null, ''].includes(selectedGroupIndex)" class="mt-3">
              <div class="row">
                <div
		                v-for="accessory in product_accessories_groups[selectedGroupIndex]?.accessories" :key="accessory.id" class="col-lg-3 col-12 col-sm-12 mt-sm-2 mb-3"
                >
                  <div class="card h-100 pointer shadow-sm" :class="{ selected: selectedAccessory && selectedAccessory.id === accessory.id }" @click="selectAccessory(accessory)">
	                  <div class="embed-responsive embed-responsive-16by9">
		                  <img :alt="accessory.name" :src="parseImageUrl(accessory.imageUrl)" class="card-img-top embed-responsive-item">
	                  </div>

		                <div class="card-body">
		                    <h5 class="card-title">{{ accessory.name }}</h5>
		                    <p class="card-text">{{ accessory.description }}</p>
		                    <p class="card-text p-0 m-0">
		                        <small class="text-muted">السعر: {{ currency(accessory.price) }}</small>
		                    </p>
		                    <p class="card-text p-0 m-0">
		                        <small class="text-muted">الكمية: {{ accessory.qty }}</small>
		                    </p>
		                </div>
                  </div>
                </div>
              </div>

              <div class="mt-3">
                <button class="btn btn-primary" @click="addAccessoryToTable">اضف المجموعة</button>
              </div>
            </div>

            <div class="mt-3">
              <table class="table table-hover">
                <thead class="table-primary">
	                <tr>
	                  <th>الاكسيسوار</th>
	                  <th>الكمية</th>
	                  <th>السعر</th>
                    <th>إزالة</th>
	                </tr>
	              </thead>
	              <tbody>
	                <tr v-for="(item, index) in selectedItems" :key="index">
	                  <td>{{ item.group.name + (item.accessory?.name ? " - " + item.accessory.name : "") }}</td>
	                  <td>{{ Number(item.accessory?.qty) || 1 }}</td>
	                  <td>{{ currency(item.accessory?.price || item.group?.price || 0) }}</td>
                    <td><button class="btn btn-outline-danger btn-sm" @click="removeAccessory(index)"><span class="fa fa-trash"></span></button></td>
	                </tr>
	              </tbody>
	            </table>
	          </div>
	        </div>

          <div class="modal-footer">
            <button class="btn btn-secondary" data-dismiss="modal" type="button">Close</button>
            <button class="btn btn-primary" @click="confirmSelection">إضافة إلى السلة</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex';
import swal from 'sweetalert';
import global_mixins from '@/utils/global_mixins';

export default {
	name: 'AddProductAccessories',
  mixins: [global_mixins],
	props: {
		id: {
			type: String,
			required: true
		},
		product: {
			type: Object,
			default: () => ({})
		},
		productsCount: {
			type: Number,
			default: () => 4
		},
		title: {
			type: String,
			default: () => "CartModal"
		},
		opened: {
			type: Boolean,
			default: false
		},
	},
	data() {
		return {
			selectedGroupIndex: "",
      selectedAccessory: null,
			selectedItems: [],
      searchTerm: "",
		};
	},
	computed: {
		...mapGetters(["product_accessories_groups", "product_differents"]),
		modalElement() {
			return window.$(`#${this.id}`);
    },
    filteredGroups() {
      if (this.searchTerm.trim() === "") {
        return this.product_accessories_groups;
      }
      return this.product_accessories_groups.filter(group =>
        group.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
		}
	},
	methods: {
		modal(...args) {
			return this.modalElement.modal(...args);
		},
		close() {
      this.modal('dispose');
		},
		open() {
			this.modal({
				backdrop: 'static',
				keyboard: false,
				focus: true,
				show: true,
      });
		},
		resetGroup() {
			this.selectedGroupIndex = "";
			this.selectedAccessory = null;
    },
		selectGroup(index) {
			this.selectedGroupIndex = index;
		},
    selectAccessory(accessory) {
	    this.selectedAccessory = this.selectedAccessory ? null : accessory;
		},
    addAccessoryToTable() {
      if (![null, ''].includes(this.selectedGroupIndex)) {
	      if (
			      (Number(this.product_accessories_groups[this.selectedGroupIndex].is_required) && !this.selectedAccessory)
	      ) {
		      swal({
			      text: "فضلا قم باختيار اكسسوار",
			      icon: "error"
		      });
	      } else {
		      this.selectedItems.push({
			      group: this.product_accessories_groups[this.selectedGroupIndex],
			      accessory: this.selectedAccessory,
		      });

		      this.resetGroup();
	      }
      } else {
        swal({
          text: "فضلا قم باختيار مجموعة",
          icon: "error"
        });
      }
    },
    removeAccessory(index) {
      this.selectedItems.splice(index, 1);
    },
    confirmSelection() {
	    if (!this.selectedItems.length) {
		    swal({
			    text: "فضلا قم باختيار مجموعة واحدة على الاقل",
			    icon: "error"
		    });
	    } else {
		    this.$emit('add-to-cart', this.selectedItems);
		    this.selectedItems = [];
		    this.close();
	    }
		},

		async loadData() {
			await this.$nextTick(async () => {
				if (this.opened) {
					await this.$store.dispatch('fetchProductDifferents', this?.product?.id);
					await this.$store.dispatch('fetchProductAccessoriesGroups', this?.product?.id);

					this.open();
				} else {
					this.close();
				}
      });
		},
	},
	async mounted() {
		this.modalElement
      .on('hidden.bs.modal', () => this.$emit('closed'))
      .on('shown.bs.modal', () => this.$emit('opened'));

		window.$(document).on('shown.bs.dropdown', function (e) {
			window.$(".input-group-search")?.focus()?.select();
		})
	},
	unmounted() {
		this.modalElement
				.off('hidden.bs.modal')
				.off('shown.bs.modal');
	},
	watch: {
		async opened(n) {
			await this.loadData();
		}
	},
};
</script>

<style scoped>
.card-title {
  font-size: 1.25rem;
  font-weight: bold;
}

.card-text {
  font-size: 1rem;
}

.embed-responsive .card-img-top {
	object-fit: cover;
}

.table thead th {
  vertical-align: bottom;
  border-bottom: 2px solid #dee2e6;
}

.table-hover tbody tr:hover {
  background-color: #f8f9fa;
}

.btn-close {
  background: none;
  border: none;
  color: #000;
  font-size: 1.5rem;
}

.modal-header {
  border-bottom: 1px solid #dee2e6;
}

.modal-footer {
  border-top: 1px solid #dee2e6;
}

.dropdown-menu {
	max-height: 200px;
	overflow-y: auto;
}

.selected {
  border: 2px solid #007bff;
  background-color: rgba(0, 123, 255, 0.1);
}

.d-flex.align-items-center {
  display: flex;
  align-items: center;
}
</style>
